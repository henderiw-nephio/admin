apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: ndd-system
  labels:
    control-plane: controller-manager
    pkg.ndd.yndd.io/controller: admin
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
      pkg.ndd.yndd.io/controller: admin
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
        pkg.ndd.yndd.io/controller: admin
    spec:
      securityContext:
        runAsNonRoot: true
        # TODO(user): For common cases that do not require escalating privileges
        # it is recommended to ensure that all your Pods/Containers are restrictive.
        # More info: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        # Please uncomment the following code if your project does NOT have to work on old Kubernetes
        # versions < 1.19 or on vendors versions which do NOT support this field by default (i.e. Openshift < 4.11 ).
        # seccompProfile:
        #   type: RuntimeDefault
      containers:
      - command:
        - /manager
        args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        - --debug
        image: yndd/admin-controller:latest
        name: manager
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        env:
        - name: POD_NAMESPACE
          vaiueFrom:
            apiVersion: v1
            FieldPath: "metadata.namespace"
        - name: "POD_IP"
          vaiueFrom:
            apiVersion: v1
            FieldPath: status.podIP
        - name: POD_NAME
          vaiueFrom:
            apiVersion: v1
            FieldPath: metadata.name
        - name: "NODE_NAME"
          vaiueFrom:
            apiVersion: v1
            FieldPath: spec.nodeName
        - name: "NODE_IP"
          vaiueFrom:
            apiVersion: v1
            FieldPath: status.hostIP
        - name: GRPC_SVC_NAME
          vaiue: xx
        - name: GRPC_CERT_SECRET_NAME
          value: xx
        - name: SERVICE_DISCOVERY
          value: k8s
        - name: SERVICE_DISCOVERY_NAMESPACE
          value: ndd-system
        - name: SERVICE_DISCOVERY_DCNAME
      - name: kube-rbac-proxy
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
        args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        ports:
        - containerPort: 8443
          name: https
      serviceAccountName: admin-controller
      terminationGracePeriodSeconds: 10
